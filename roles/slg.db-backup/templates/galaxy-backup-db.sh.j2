#!/bin/bash

################################################################################
#
#   galaxy-aust-backup.sh
#
#   Author: Simon Gladman, Melbourne Bioinformatics, 2019
#
#   A script to:
#     1. Backup Galaxy's database
#       * using pgdump
#       * compression
#     2. Use swift to put the backup into openstack's object store
#       * in a particular container
#       * using a set of openstack credentials
#     3. To write details to a log file
#     4. Rotate the backups using a retention policy of:
#       * Months - keep X momthly backups
#       * Weeks - keep Y weekly backups
#       * Daily - keep Z daily backups
#       * backup files older than this will be removed from the local storage
#         as well as the openstack storage.
#
################################################################################

set -euo pipefail

BACKUP_DIR='{{ backup_path }}'
LOGFILE='{{ script_path }}/galaxy_backup.log'

#The object store container to send the backups to
SWIFT_BACKUP_CONTAINER='{{ swift_backup_container }}'
SWIFT_CRED_FILE='{{ swift_cred_file }}'
VENV_LOCATION='{{ venv_location }}'

#The name of the database to backup
PSQL_DB='{{ psql_db }}'

# Retention time variables
MONTHLY_BACKUP_DAY={{ monthly_backup_day }}  #Monthly backups will run on this day of the month
WEEKLY_BACKUP_DAY={{ weekly_backup_day }}  #Weekly backups will run on this day of the week
RETENTION_DAY={{ retention_day }}       #Keep daily backups for this many days (6 days)
RETENTION_WEEK={{ retention_week }}     #Keep weekly backups for this many days (21 days = 3 weeks)
RETENTION_MONTH={{ retention_month }}    #Keep monthly backups for this many days (92 days ~ 3 months)

{% if use_slack == true and slack_galaxy_log_webhook is defined %}
post_to_slack() {
  curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${1}\"}" {{ slack_galaxy_log_webhook }}
}
{% endif %}

#Get the current month day and week day
month_day=`date +"%d"`
week_day=`date +"%u"`

#On monthly backup day do:
if [ "$month_day" -eq ${MONTHLY_BACKUP_DAY} ] ; then
  BACKUP_TYPE='-monthly'
  RETENTION_DAY_LOOKUP=$RETENTION_MONTH

else

  #On a weekly backup day do:
  if [ "$week_day" -eq ${WEEKLY_BACKUP_DAY} ] ; then
    BACKUP_TYPE='-weekly'
    RETENTION_DAY_LOOKUP=$RETENTION_WEEK

  else

    #every other day do:
    BACKUP_TYPE='-daily'
    RETENTION_DAY_LOOKUP=$RETENTION_DAY

  fi

fi

cd $BACKUP_DIR

#create the backup filename

backup_filename=`date +"%d-%m-%Y"`'-'${PSQL_DB}${BACKUP_TYPE}'.sql.gz'

PRELIM_OUTPUT="[$(date --iso-8601=seconds)] Starting database backup\n"
PRELIM_OUTPUT+="  Month day: ${month_day}\n"
PRELIM_OUTPUT+="  Week day: ${week_day}\n"
PRELIM_OUTPUT+="  Backup type: ${BACKUP_TYPE}\n"
{% if use_swift == true %}
PRELIM_OUTPUT+="  Swift details: ${SWIFT_BACKUP_CONTAINER}\n"
{% endif %}
PRELIM_OUTPUT+="  Database: ${PSQL_DB}\n"
PRELIM_OUTPUT+="  Retention: ${RETENTION_DAY_LOOKUP}\n"
PRELIM_OUTPUT+="  Backup filename: ${backup_filename}\n"

#Send prelim output to the logfile
echo $PRELIM_OUTPUT >> $LOGFILE

{% if use_slack == true and slack_galaxy_log_webhook is defined %}
#send prelim output to slack
post_to_slack "$PRELIM_OUTPUT"
{% endif %}

#Now run the pgdump

pg_dump \
  {{ connection_string }} \
  | pigz > ${backup_filename}

#delete anything that's too old!
#put the filenames in a file so we can get rid of them from object store.
if [ -f search_file.tmp ] ; then
        rm search_file.tmp
fi
find -maxdepth 1 -name "*${BACKUP_TYPE}*" -mtime +$RETENTION_DAY_LOOKUP > search_file.tmp
sed -i "s/\.\///" search_file.tmp
echo '  Contents of search_file.tmp' >> $LOGFILE
cat 'search_file.tmp' >> $LOGFILE

{% if use_swift == true %}
. ${SWIFT_CRED_FILE}

set +o nounset
source ${VENV_LOCATION}/bin/activate
set -o nounset

swift --quiet --retries 5 --timeout 120 upload --segment-size 2000000000 --segment-threads 1 ${SWIFT_BACKUP_CONTAINER} ${backup_filename}

{% endif %}

# don't exit on swift errors
set +e
for f in $(<search_file.tmp)
    do
        echo $f
        {% if use_swift == true %}
        echo '  Deleting on swift: '$f >> $LOGFILE
        #delete cloud copy and log error if delete fails
        swift --retries 5 --timeout 120 delete --object-threads 1 ${SWIFT_BACKUP_CONTAINER} $f || echo '  swift delete failed for: '$f >> $LOGFILE
        {% endif %}
        #delete local copy
        rm $f
    done
# restore exit on fail
set -e

rm search_file.tmp

POST_OUTPUT="[$(date --iso-8601=seconds)] Database backup complete."
echo $POST_OUTPUT >> $LOGFILE
{% if use_slack == true and slack_galaxy_log_webhook is defined %}
post_to_slack "$POST_OUTPUT"
{% endif %}
