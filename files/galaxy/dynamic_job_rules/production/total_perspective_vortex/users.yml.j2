users:
    default:
      rules:
        - id: slurm_training_rule
          if: |
            training_job_matches_specs = False  # return value
            training_rules_apply = False
            try:
              if any([r for r in user.all_roles() if (not r.deleted and r.name.startswith('training'))]):
                training_rules_apply = True
              elif 'training' in [hta.user_tname for hta in job.history.tags]:
                training_rules_apply = True
            except Exception as e:
              log.debug('--tpv log debug: Exception checking training status of job')
              log.debug(str(e))

            if training_rules_apply:
              include_tags = []
              exclude_tags = ['pulsar', 'training-exempt']
              # slurm preferred for training if the tool can run on pulsar but has a low pulsar_score and no pulsar-training-large tag
              slurm_preferred_for_training = pulsar_score is not None and pulsar_score < pulsar_score_slurm_threshold and helpers.tag_values_match(entity, match_tag_values=[], exclude_tag_values=['pulsar-training-large', 'training-exempt'])
              training_job_matches_specs = slurm_preferred_for_training or helpers.tag_values_match(entity, include_tags, exclude_tags)
            training_job_matches_specs
          max_cores: 2
          max_mem: max_cores * 3.8
          context:
            partition: training
          scheduling:
            require:
              - slurm
              - training
        - id: pulsar_training_rule
          if: |
            training_job_matches_specs = False  # return value
            training_rules_apply = False
            try:
              if any([r for r in user.all_roles() if (not r.deleted and r.name.startswith('training'))]):
                training_rules_apply = True
              elif 'training' in [hta.user_tname for hta in job.history.tags]:
                training_rules_apply = True
            except Exception as e:
              log.debug('--tpv log debug: Exception checking training status of job')
              log.debug(str(e))
              
            if training_rules_apply:
              include_tags = ['pulsar']
              exclude_tags = ['pulsar-training-large', 'training-exempt']
              slurm_preferred_for_training = pulsar_score is not None and pulsar_score < pulsar_score_slurm_threshold
              training_job_matches_specs = (not slurm_preferred_for_training) and helpers.tag_values_match(entity, include_tags, exclude_tags)
            training_job_matches_specs
          max_cores: 4
          max_mem: max_cores * 2.9  # ratio for pulsar-nci-training
          scheduling:
            require:
              - pulsar
              - training
        - id: pulsar_training_large_rule
          if: |
            training_job_matches_specs = False  # return value
            training_rules_apply = False
            try:
              if any([r for r in user.all_roles() if (not r.deleted and r.name.startswith('training'))]):
                training_rules_apply = True
              elif 'training' in [hta.user_tname for hta in job.history.tags]:
                training_rules_apply = True
            except Exception as e:
              log.debug('--tpv log debug: Exception checking training status of job')
              log.debug(str(e))

            if training_rules_apply:
              include_tags = ['pulsar-training-large']
              exclude_tags = ['training-exempt']
              training_job_matches_specs = helpers.tag_values_match(entity, include_tags, exclude_tags)
            training_job_matches_specs
          max_cores: 16
          max_mem: max_cores * 2.9  # ratio for pulsar-nci-training
          scheduling:
            require:
              - pulsar
              - training
    test_user:
      rules:
        - id: singularity_test_user_rule
          if: |
            enable_singularity = False
            if tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"]):
              try:
                enable_singularity = job.history is not None and 'singularity' in [hta.user_tname for hta in job.history.tags]
              except:
                pass
            enable_singularity
          params:
            singularity_enabled: True
            docker_enabled: False
            dependency_resolution: none
        - id: conda_test_user_rule
          if: |
            disable_docker_and_singularity = False
            if tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"]):
              try:
                disable_docker_and_singularity = job.history is not None and 'conda' in [hta.user_tname for hta in job.history.tags]
              except:
                pass
            disable_docker_and_singularity
          params:
            singularity_enabled: False
            docker_enabled: False
    jenkins_bot@usegalaxy.org.au:
      inherits: test_user
      cores: test_cores
      mem: cores * 3.8
      scheduling:
        require:
          - slurm
    star@email.com:
      inherits: test_user
      max_mem: 90
      scheduling:
        require:
          - slurm
      rules:
        - id: star_minio_test_rule
          if: |
            'fastqc' in tool.id
          params:
            object_store_id: minio_test
        - id: star_aws_gateway_test_rule
          if: |
            'samtools_merge' in tool.id
          params:
            object_store_id: aws_gateway_test
    pulsar_mel2_user@usegalaxy.org.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar # pulsar must be in require/prefer/accept for a job to be scheduled to pulsar
              - offline # allow scheduling to a destination even when it is offline
            require:
              - pulsar-mel2
    pulsar_mel3_user@usegalaxy.org.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - offline
            require:
              - pulsar-mel3
    pulsar_paw_user@usegalaxy.org.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - offline
            require:
              - pulsar-paw
    phm1@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - offline
            require:
              - pulsar-high-mem1
    phm2@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"]) or any([tool.id == x for x in ['fgenesh']])
          scheduling:
            accept:
              - pulsar
              - offline
            require:
              - pulsar-high-mem2
    pncitrain@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - training
              - offline
            require:
              - pulsar-nci-training
    pqhm0@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - offline
            require:
              - pulsar-qld-high-mem0
    pqhm1@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - offline
            require:
              - pulsar-qld-high-mem1
    pqhm2@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - offline
            require:
              - pulsar-qld-high-mem2
    pblast@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - offline
              - pulsar-blast
            require:
              - pulsar-qld-blast
    pqld@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - pulsar-quick
              - offline
            require:
              - pulsar-QLD
    qldgpu1@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - pulsar-qld-gpu
              - offline
            require:
              - pulsar-qld-gpu1
    qldgpu2@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - pulsar-qld-gpu
              - offline
            require:
              - pulsar-qld-gpu2
    qldgpu3@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - pulsar-qld-gpu
              - offline
            require:
              - pulsar-qld-gpu3
    qldgpu4@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - pulsar-qld-gpu
              - offline
            require:
              - pulsar-qld-gpu4
    qldgpu5@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - pulsar-qld-gpu
              - offline
            require:
              - pulsar-qld-gpu5
    qldgpu6@genome.edu.au:
      inherits: test_user
      rules:
        - if: tool.id is not None and any(tool.id.startswith(f"{ts}.") for ts in ["toolshed", "testtoolshed"])
          scheduling:
            accept:
              - pulsar
              - pulsar-qld-gpu
              - offline
            require:
              - pulsar-qld-gpu6
    __selenium_test_user:
      abstract: true
      rules:
        - id: selenium_test_user_pulsar_rule
          if: |
            tool_id_matched = False
            # make sure that a number of pulsar-friendly tools will always run on pulsar
            pulsar_tools = [
              '/bwa/bwa_mem/',
              '/fastqc/fastqc/',
              '/shovill/shovill/',
              '/ivar_trim/ivar_trim/',
              '/lofreq_filter/lofreq_filter/',
              '/cutadapt/cutadapt/',
            ]
            if tool.id is not None and any([pulsar_tool in tool.id for pulsar_tool in pulsar_tools]):
              tool_id_matched = True
            tool_id_matched
          scheduling:
            require:
              - pulsar
              - pulsar-mel2
    selenium_st_regular@genome.edu.au:
      inherits: __selenium_test_user
    selenium_st_minio@genome.edu.au:
      inherits: __selenium_test_user
      params:
        object_store_id: minio_test
    selenium_st_aws_gateway@genome.edu.au:
      inherits: __selenium_test_user
      context:
        slurm_singularity_volumes: "{{ slurm_singularity_volumes }},/mnt/aws_gateway:ro"
        slurm_docker_volumes: "{{ slurm_docker_volumes }},/mnt/aws_gateway:ro"
      params:
        object_store_id: aws_gateway_test
    selenium_st_aws_bucket@genome.edu.au:
      inherits: __selenium_test_user
      params:
        object_store_id: aws_bucket_test
    selenium_st_nectar@genome.edu.au:
      inherits: __selenium_test_user
      params:
        object_store_id: nectar_test
    selenium_st_pawsey_s3@genome.edu.au:
      inherits: __selenium_test_user
      params:
        object_store_id: pawsey_s3_test
    selenium_st_pawsey_nfs@genome.edu.au:
      inherits: __selenium_test_user
      params:
        object_store_id: pawsey_nfs_test
